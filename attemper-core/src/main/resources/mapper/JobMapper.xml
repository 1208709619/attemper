<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.attemper.core.dao.dispatch.JobMapper">

    <insert id="add" parameterType="com.github.attemper.common.result.dispatch.job.Job">
        INSERT INTO ${tablePrefix}job (
            JOB_NAME,
            DISPLAY_NAME,
            CONTENT,
            STATUS,
            CONCURRENT,
            UPDATE_TIME,
            REMARK,
            TENANT_ID
        )
        VALUES
        (
            #{jobName, jdbcType=VARCHAR},
            #{displayName, jdbcType=VARCHAR},
            #{content, jdbcType=VARCHAR},
            #{status, jdbcType=INTEGER},
            #{concurrent, jdbcType=INTEGER},
            #{updateTime, jdbcType=TIMESTAMP},
            #{remark, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
        )
    </insert>

    <update id="update" parameterType="com.github.attemper.common.result.dispatch.job.Job">
        UPDATE ${tablePrefix}job j
        <set>
            STATUS = #{status, jdbcType=INTEGER},
            CONCURRENT = #{concurrent, jdbcType=INTEGER},
            UPDATE_TIME = #{updateTime, jdbcType=TIMESTAMP},
            REMARK = #{remark, jdbcType=VARCHAR},
        </set>
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
    </update>

    <update id="updateContent" parameterType="com.github.attemper.common.result.dispatch.job.Job">
        UPDATE ${tablePrefix}job j
        <set>
            UPDATE_TIME = #{updateTime, jdbcType=TIMESTAMP},
            CONTENT = #{content, jdbcType=VARCHAR},
        </set>
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
    </update>

    <select id="get" parameterType="map" resultType="com.github.attemper.common.result.dispatch.job.Job">
        SELECT j.JOB_NAME, j.DISPLAY_NAME, j.CONTENT, j.CONCURRENT,
        j.STATUS, j.UPDATE_TIME,j.REMARK, j.TENANT_ID
        FROM ${tablePrefix}job j
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
    </select>

    <select id="list" parameterType="map" resultType="com.github.attemper.common.result.dispatch.job.Job">
        SELECT j.JOB_NAME, j.DISPLAY_NAME, j.CONCURRENT,
        j.STATUS, j.UPDATE_TIME,j.REMARK, j.TENANT_ID
        FROM ${tablePrefix}job j
        <where>
            <if test="jobName != null">
                and lower(JOB_NAME) like concat('%', lower(#{jobName, jdbcType=VARCHAR}), '%')
            </if>
            <if test="displayName != null">
                and lower(DISPLAY_NAME) like concat('%', lower(#{displayName, jdbcType=VARCHAR}), '%')
            </if>
            <if test="status != null &amp;&amp;status.size() &gt; 0">
                and STATUS in
                <foreach item="item" collection="status" open="(" separator="," close=")">
                    #{item, jdbcType=INTEGER}
                </foreach>
            </if>
            <include refid="condTenantId"/>
        </where>
        <choose>
            <when test="sort == null">
                order by JOB_NAME
            </when>
            <otherwise>
                order by ${sort}
            </otherwise>
        </choose>
    </select>

    <select id="versions" parameterType="map"
            resultType="com.github.attemper.common.result.dispatch.job.JobWithVersionResult">
        SELECT
        *
        FROM
        (SELECT
        a.JOB_NAME,
        a.DISPLAY_NAME,
        a.STATUS,
        a.CONCURRENT,
        a.REMARK,
        a.TENANT_ID,
        b.ID_ AS PROC_DEF_ID,
        b.VERSION_ AS VERSION,
        c.DEPLOY_TIME_ AS UPDATE_TIME
        FROM
        ${tablePrefix}job a
        JOIN act_re_procdef b
        ON a.JOB_NAME = b.KEY_
        AND a.TENANT_ID = b.TENANT_ID_
        JOIN act_re_deployment c
        ON b.DEPLOYMENT_ID_ = c.ID_) j
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
        ORDER BY VERSION
    </select>

    <delete id="delete" parameterType="map">
        DELETE FROM j USING ${tablePrefix}job j
        <where>
            JOB_NAME in
            <foreach item="jobName" collection="jobNames" open="(" separator="," close=")">
                #{jobName}
            </foreach>
            <include refid="condTenantId"/>
        </where>
        <!--
        ;
        DELETE FROM a,b,c USING
        act_re_procdef a
        JOIN act_ge_bytearray c
        ON a.DEPLOYMENT_ID_ = c.DEPLOYMENT_ID_ AND a.RESOURCE_NAME_ = c.NAME_
        JOIN act_re_deployment b
        ON a.DEPLOYMENT_ID_ = b.ID_
        <where>
            a.KEY_ in
            <foreach item="jobName" collection="jobNames" open="(" separator="," close=")">
                #{jobName}
            </foreach>
            AND a.TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
        </where>-->
    </delete>

    <update id="updateStatus" parameterType="map">
        UPDATE ${tablePrefix}job j
        <set>
            j.STATUS = #{status, jdbcType=INTEGER},
        </set>
        <where>
            JOB_NAME in
            <foreach item="jobName" collection="jobNames" open="(" separator="," close=")">
                #{jobName}
            </foreach>
            <include refid="condTenantId"/>
        </where>
    </update>

    <select id="listArg" parameterType="map"
            resultType="com.github.attemper.common.result.dispatch.job.ArgAllocatedResult">
        SELECT ARG_NAME, ARG_TYPE, ARG_VALUE, ALLOCATED
        FROM (
        SELECT t.*, 1 AS ALLOCATED FROM ${tablePrefix}arg t
        WHERE TENANT_ID = #{tenantId, jdbcType=VARCHAR}
        AND ARG_NAME IN
        (
        SELECT ar.ARG_NAME
        FROM ${tablePrefix}arg ar JOIN ${tablePrefix}job_arg j USING(ARG_NAME, TENANT_ID)
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
        )
        UNION ALL
        SELECT t.*, 0 AS ALLOCATED FROM ${tablePrefix}arg t
        WHERE TENANT_ID = #{tenantId, jdbcType=VARCHAR}
        AND ARG_NAME NOT IN
        (
        SELECT ar.ARG_NAME
        FROM ${tablePrefix}arg ar JOIN ${tablePrefix}job_arg j USING(ARG_NAME, TENANT_ID)
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
        )
        ) a
        <where>
            <if test="argName != null">
                and lower(ARG_NAME) like concat('%', lower(#{argName, jdbcType=VARCHAR}), '%')
            </if>
            <if test="argType != null">
                and ARG_TYPE = #{argType, jdbcType = INTEGER}
            </if>
            <if test="argValue != null">
                and lower(ARG_VALUE) like concat('%', lower(#{argValue, jdbcType = VARCHAR}), '%')
            </if>
        </where>
    </select>

    <select id="getAllArg" parameterType="map"
            resultType="com.github.attemper.common.result.dispatch.arg.Arg">
        SELECT
        a.*
        FROM
        ${tablePrefix}arg a
        JOIN ${tablePrefix}job_arg ja USING (ARG_NAME, TENANT_ID)
        JOIN ${tablePrefix}job j USING (JOB_NAME, TENANT_ID)
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
    </select>

    <insert id="addArg" parameterType="map">
      INSERT INTO ${tablePrefix}job_arg (
          JOB_NAME,
          ARG_NAME,
          TENANT_ID
        )
        VALUES
          (
            #{jobName, jdbcType=VARCHAR},
            #{argName, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
          )
    </insert>

    <delete id="deleteArg" parameterType="map">
        DELETE FROM j USING ${tablePrefix}job_arg j
        <where>
            <include refid="condJobName"/>
            <if test="argName != null">
                and ARG_NAME = #{argName, jdbcType=VARCHAR}
            </if>
            <include refid="condTenantId"/>
        </where>
    </delete>

    <select id="getProject" parameterType="map"
            resultType="com.github.attemper.common.result.app.project.Project">
        select p.*
        FROM ${tablePrefix}project p
        JOIN ${tablePrefix}job_project jp
        USING (PROJECT_NAME, TENANT_ID)
        JOIN ${tablePrefix}job j
        USING (JOB_NAME, TENANT_ID)
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
    </select>

    <update id="saveProject" parameterType="map">
        delete from j using ${tablePrefix}job_project j
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
        ;
        <if test="projectName != null">
            insert into ${tablePrefix}job_project
            (
            JOB_NAME,
            PROJECT_NAME,
            TENANT_ID
            )
            values
            (
            #{jobName, jdbcType=VARCHAR},
            #{projectName, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
            )
        </if>
    </update>

    <sql id="condJobName">
        <if test="jobName != null">
            and j.JOB_NAME = #{jobName, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condTenantId">
        <if test="tenantId != null">
            and j.TENANT_ID = #{tenantId, jdbcType=VARCHAR}
        </if>
    </sql>
</mapper>