<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sse.attemper.core.dao.mapper.job.JobMapper">

    <insert id="add" parameterType="com.sse.attemper.common.result.dispatch.job.FlowJob">
        INSERT INTO ${tablePrefix}job (
            JOB_NAME,
            DISPLAY_NAME,
            STATUS,
            MAX_REVERSION,
            CREATE_TIME,
            REMARK,
            TENANT_ID
        )
        VALUES
        (
            #{jobName, jdbcType=VARCHAR},
            #{displayName, jdbcType=VARCHAR},
            #{status, jdbcType=INTEGER},
            #{maxReversion, jdbcType=INTEGER},
            #{createTime, jdbcType=TIMESTAMP},
            #{remark, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
        )
    </insert>

    <insert id="addInfo" parameterType="com.sse.attemper.common.result.dispatch.job.FlowJob">
        INSERT INTO ${tablePrefix}job_info (
            JOB_NAME,
            JOB_CONTENT,
            REVERSION,
            VERSION,
            UPDATE_TIME,
            TENANT_ID
        )
        VALUES
        (
            #{jobName, jdbcType=VARCHAR},
            #{jobContent, jdbcType=VARCHAR},
            #{reversion, jdbcType=INTEGER},
            #{version, jdbcType=INTEGER},
            #{updateTime, jdbcType=TIMESTAMP},
            #{tenantId, jdbcType=VARCHAR}
        )
    </insert>

    <update id="update" parameterType="com.sse.attemper.common.result.dispatch.job.FlowJob">
        UPDATE ${tablePrefix}job j
        SET
        STATUS = #{status, jdbcType=INTEGER},
        MAX_REVERSION = #{maxReversion, jdbcType=INTEGER},
        MAX_VERSION = #{maxVersion, jdbcType=INTEGER},
        REMARK = #{remark, jdbcType=VARCHAR}
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
    </update>

    <update id="updateInfo" parameterType="com.sse.attemper.common.result.dispatch.job.FlowJob">
        UPDATE ${tablePrefix}job_info j
        SET
        VERSION = #{version, jdbcType=INTEGER},
        UPDATE_TIME = #{updateTime, jdbcType=TIMESTAMP},
        DEPLOYMENT_TIME = #{deploymentTime, jdbcType=TIMESTAMP},
        JOB_CONTENT = #{jobContent, jdbcType=VARCHAR}
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
            and REVERSION = #{reversion, jdbcType=INTEGER}
        </where>
    </update>

    <select id="get" parameterType="map" resultType="com.sse.attemper.common.result.dispatch.job.FlowJob">
        SELECT ji.JOB_NAME, j.DISPLAY_NAME, ji.JOB_CONTENT, ji.UPDATE_TIME, ji.DEPLOYMENT_TIME,
        ji.TENANT_ID, j.MAX_REVERSION, ji.REVERSION, j.MAX_VERSION, ji.VERSION, j.STATUS, j.CREATE_TIME,
        j.REMARK
        from ${tablePrefix}job j
        join ${tablePrefix}job_info ji
        using(JOB_NAME, TENANT_ID)
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
            <if test="reversion != null">
                and REVERSION = #{reversion, jdbcType=INTEGER}
            </if>
        </where>
        <if test="reversion == null">
            order by REVERSION desc limit 1
        </if>
    </select>

    <select id="list" parameterType="map" resultType="com.sse.attemper.common.result.dispatch.job.FlowJob">
        SELECT * FROM (
        SELECT ji.JOB_NAME, j.DISPLAY_NAME, ji.JOB_CONTENT, ji.UPDATE_TIME, ji.DEPLOYMENT_TIME,
        ji.TENANT_ID, j.MAX_REVERSION, ji.REVERSION, j.MAX_VERSION, ji.VERSION, j.STATUS, j.CREATE_TIME,
        j.REMARK
        FROM
        ${tablePrefix}job j
        JOIN ${tablePrefix}job_info ji USING (JOB_NAME, TENANT_ID)
        JOIN
        (SELECT JOB_NAME, TENANT_ID, MAX(VERSION) AS VERSION FROM ${tablePrefix}job_info GROUP BY JOB_NAME,
        TENANT_ID) ji_m
        USING (JOB_NAME, TENANT_ID, VERSION)
        WHERE j.MAX_VERSION IS NOT NULL
        UNION
        SELECT ji.JOB_NAME, j.DISPLAY_NAME, ji.JOB_CONTENT, ji.UPDATE_TIME, ji.DEPLOYMENT_TIME,
        ji.TENANT_ID, j.MAX_REVERSION, ji.REVERSION, j.MAX_VERSION, ji.VERSION, j.STATUS, j.CREATE_TIME,
        j.REMARK
        FROM
        ${tablePrefix}job j
        JOIN ${tablePrefix}job_info ji USING (JOB_NAME, TENANT_ID)
        JOIN (SELECT JOB_NAME, TENANT_ID, MAX(REVERSION) AS REVERSION FROM ${tablePrefix}job_info GROUP BY JOB_NAME,
        TENANT_ID) ji_m
        USING (JOB_NAME, TENANT_ID, REVERSION )
        WHERE j.MAX_VERSION IS NULL
        ) job
        <where>
            <if test="jobName != null">
                and lower(JOB_NAME) like concat('%', lower(#{jobName, jdbcType=VARCHAR}), '%')
            </if>
            <if test="displayName != null">
                and lower(DISPLAY_NAME) like concat('%', lower(#{displayName, jdbcType=VARCHAR}), '%')
            </if>
            <if test="status != null &amp;&amp;status.size() &gt; 0">
                and STATUS in
                <foreach item="item" collection="status" open="(" separator="," close=")">
                    #{item, jdbcType=INTEGER}
                </foreach>
            </if>
            <if test="tenantId != null">
                and TENANT_ID = #{tenantId, jdbcType=VARCHAR}
            </if>
        </where>
        <choose>
            <when test="sort == null">
                order by JOB_NAME
            </when>
            <otherwise>
                order by ${sort}
            </otherwise>
        </choose>
    </select>

    <select id="versions" parameterType="map" resultType="com.sse.attemper.common.result.dispatch.job.FlowJob">
        <!-- tip: do not return job content here because the column may be too big -->
        SELECT
        ji.JOB_NAME,j.DISPLAY_NAME, ji.UPDATE_TIME, ji.DEPLOYMENT_TIME, ji.TENANT_ID,
        j.MAX_REVERSION, j.MAX_VERSION, ji.REVERSION, ji.VERSION, j.STATUS, j.CREATE_TIME, j.REMARK
        FROM
        ${tablePrefix}job j JOIN ${tablePrefix}job_info ji USING (JOB_NAME, TENANT_ID)
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
        ORDER BY ji.REVERSION DESC
    </select>

    <delete id="delete" parameterType="map">
        DELETE FROM
        j, ji USING
        ${tablePrefix}job j
        JOIN ${tablePrefix}job_info ji
        USING (job_name, tenant_id)
        <where>
            <if test="jobNames != null">
                JOB_NAME in
                <foreach item="jobName" collection="jobNames" open="(" separator="," close=")">
                    #{jobName}
                </foreach>
            </if>
            <include refid="condTenantId"/>
        </where>
    </delete>

    <select id="getProject" parameterType="map" resultType="com.sse.attemper.common.result.dispatch.project.Project">
        select jp.*
        from ${tablePrefix}job_project jp
        join ${tablePrefix}job j
        on jp.JOB_NAME = j.JOB_NAME and jp.TENANT_ID = j.TENANT_ID
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
    </select>

    <update id="saveProject" parameterType="map">
        delete from j using ${tablePrefix}job_project j
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
        ;
        <if test="projectName != null">
            insert into ${tablePrefix}job_project
            (
            JOB_NAME,
            PROJECT_NAME,
            TENANT_ID
            )
            values
            (
            #{jobName, jdbcType=VARCHAR},
            #{projectName, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
            )
        </if>
    </update>

    <sql id="condJobName">
        <if test="jobName != null">
            and j.JOB_NAME = #{jobName, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condTenantId">
        <if test="tenantId != null">
            and j.TENANT_ID = #{tenantId, jdbcType=VARCHAR}
        </if>
    </sql>
</mapper>