<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sse.attemper.core.dao.mapper.job.BaseJobMapper">

    <insert id="add" parameterType="com.sse.attemper.sdk.common.result.dispatch.job.BaseJob">
        INSERT INTO ${tablePrefix}job (
            `JOB_NAME`,
            `STATUS`,
            `CREATE_TIME`,
            `REMARK`,
            `TENANT_ID`
        )
        VALUES
        (
            #{jobName, jdbcType=VARCHAR},
            #{status, jdbcType=INTEGER},
            #{createTime, jdbcType=TIMESTAMP},
            #{remark, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
        )
    </insert>

    <insert id="addHistory" parameterType="com.sse.attemper.sdk.common.result.dispatch.job.BaseJob">
        INSERT INTO ${tablePrefix}job_history (
            `JOB_NAME`,
            `DISPLAY_NAME`,
            `JOB_CONTENT`,
            `REVERSION`,
            `VERSION`,
            `UPDATE_TIME`,
            `TENANT_ID`
        )
        VALUES
        (
            #{jobName, jdbcType=VARCHAR},
            #{displayName, jdbcType=VARCHAR},
            #{jobContent, jdbcType=VARCHAR},
            #{reversion, jdbcType=INTEGER},
            #{version, jdbcType=INTEGER},
            #{updateTime, jdbcType=TIMESTAMP},
            #{tenantId, jdbcType=VARCHAR}
        )
    </insert>

    <update id="update" parameterType="com.sse.attemper.sdk.common.result.dispatch.job.BaseJob">
        UPDATE ${tablePrefix}job j
        SET
        STATUS = #{status, jdbcType=INTEGER},
        REMARK = #{remark, jdbcType=VARCHAR}
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
        </where>
    </update>

    <select id="get" parameterType="map" resultType="com.sse.attemper.sdk.common.result.dispatch.job.BaseJob">
        select jh.*, j.`STATUS`, j.`CREATE_TIME`, j.REMARK
        from ${tablePrefix}job j
        join ${tablePrefix}job_history jh
        using(JOB_NAME, TENANT_ID)
        <where>
            <include refid="condJobName"/>
            <include refid="condTenantId"/>
            <if test="reversion != null">
                and REVERSION = #{reversion, jdbcType=INTEGER}
            </if>
        </where>
        <if test="reversion == null">
            order by REVERSION desc limit 1
        </if>
    </select>

    <select id="list" parameterType="map" resultType="com.sse.attemper.sdk.common.result.dispatch.job.BaseJob">
        SELECT jh.*, j.`STATUS`, j.`CREATE_TIME`, j.REMARK
        FROM ${tablePrefix}job j
        JOIN ${tablePrefix}job_history jh
        USING(JOB_NAME, TENANT_ID)
        JOIN (SELECT JOB_NAME, TENANT_ID, MAX(REVERSION) AS REVERSION FROM ${tablePrefix}job_history GROUP BY JOB_NAME,
        TENANT_ID) jh_m
        USING(JOB_NAME, TENANT_ID, REVERSION)
        <where>
            <if test="jobName != null">
                and lower(j.JOB_NAME) like concat('%', lower(#{jobName, jdbcType=VARCHAR}), '%')
            </if>
            <if test="displayName != null">
                and lower(DISPLAY_NAME) like concat('%', lower(#{displayName, jdbcType=VARCHAR}), '%')
            </if>
            <if test="status != null &amp;&amp;status.size() &gt; 0">
                and `STATUS` in
                <foreach item="item" collection="status" open="(" separator="," close=")">
                    #{item, jdbcType=INTEGER}
                </foreach>
            </if>
            <include refid="condTenantId"/>
        </where>
        <choose>
            <when test="sort == null">
                order by j.JOB_NAME
            </when>
            <otherwise>
                order by j.${sort}
            </otherwise>
        </choose>
    </select>

    <delete id="delete" parameterType="map">
        delete from ${tablePrefix}job
        <where>
            <if test="jobNames != null">
                JOB_NAME in
                <foreach item="jobName" collection="jobNames" open="(" separator="," close=")">
                    #{jobName}
                </foreach>
            </if>
            <if test="tenantId != null">
                and TENANT_ID = #{tenantId, jdbcType=VARCHAR}
            </if>
        </where>
    </delete>

    <sql id="condJobName">
        <if test="jobName != null">
            and j.JOB_NAME = #{jobName, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condTenantId">
        <if test="tenantId != null">
            and j.TENANT_ID = #{tenantId, jdbcType=VARCHAR}
        </if>
    </sql>
</mapper>